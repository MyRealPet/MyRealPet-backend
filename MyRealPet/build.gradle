plugins {
    id "java-library"
    id "idea"
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

description "마이리얼펫 API 프로젝트"
defaultTasks("build")

allprojects {

    group = "com.myrealpet"

    repositories {
        mavenCentral()
    }
}

subprojects {

    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'org.springframework.boot'

    def javaVersion = JavaVersion.VERSION_21

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    tasks {
        test {
            useJUnitPlatform()
            testLogging {
                events("failed")
            }
        }
    }

    dependencyManagement {
        imports {
            // mavenBom("com.myrealtrip.kommons:kommons-bom:0.4.0")
            mavenBom("org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE")
            mavenBom("org.jetbrains.kotlin:kotlin-bom:1.3.72")
            mavenBom("io.netty:netty-bom:4.1.50.Final")
            mavenBom("com.fasterxml.jackson:jackson-bom:2.11.1")
            mavenBom("io.github.resilience4j:resilience4j-bom:1.5.0")
            mavenBom("io.beanmother:beanmother:0.9.0")
            mavenBom("com.amazonaws:aws-java-sdk-bom:1.11.804")
        }
        dependencies {
            dependency("com.google.code.findbugs:jsr305:3.0.2")
            dependency("org.projectlombok:lombok:1.18.30")

            // Jakarta
            dependency("org.javassist:javassist:3.27.0-GA")
            dependency("jakarta.activation:jakarta.activation-api:1.2.2")
            dependency("jakarta.annotation:jakarta.annotation-api:1.3.5")
            dependency("jakarta.el:jakarta.el-api:3.0.3")
            dependency("jakarta.inject:jakarta.inject-api:1.0.1")
            dependency("jakarta.persistence:jakarta.persistence-api:2.2.3")
            dependency("jakarta.validation:jakarta.vaRefresh Gradlelidation-api:2.0.2")

            dependency("io.beanmother:beanmother-core:0.9.0")
            dependency("io.beanmother:beanmother-java8-converter:0.9.0")
            dependency("io.beanmother:beanmother-guava-converter:0.9.0")
            dependency("io.beanmother:beanmother-builder-converter:0.9.0")
        }
    }

    dependencies {
        // HINT: 기존 dependency managements plugin 에서 제공하는 기능입니다.
        //
        compileOnly("org.jetbrains:annotations:19.0.0")
        annotationProcessor("org.jetbrains:annotations:19.0.0")
        compileOnly("jakarta.annotation:jakarta.annotation-api")

        implementation group: 'org.locationtech.spatial4j', name: 'spatial4j', version: '0.7'
        implementation group: 'org.locationtech.jts', name: 'jts-core', version: '1.15.0'

        implementation("org.springframework.boot:spring-boot-starter-cache")
        implementation("org.springframework.boot:spring-boot-autoconfigure")
        implementation("org.springframework.boot:spring-boot-starter-actuator")
        implementation("io.micrometer:micrometer-registry-prometheus")
        implementation("org.springframework.boot:spring-boot-starter-json")
        implementation("org.springframework.boot:spring-boot-starter-validation")
        implementation("org.springframework.boot:spring-boot-starter-aop")
        implementation("org.ahocorasick:ahocorasick:0.6.3")
        implementation("org.springframework.cloud:spring-cloud-starter-openfeign:4.0.3")

        implementation("org.springframework.boot:spring-boot-starter-web")
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        runtimeOnly("org.springframework.boot:spring-boot-starter-tomcat")

        // Swagger for REST API
        implementation "io.springfox:springfox-swagger2:2.9.2"
        implementation "io.springfox:springfox-swagger-ui:2.9.2"

        implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.9.2'

        implementation platform("software.amazon.awssdk:bom:2.25.1")
        implementation "software.amazon.awssdk:s3"
        implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.0.3'

        implementation 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
        implementation 'org.springframework.boot:spring-boot-starter-web'

        implementation 'me.paulschwarz:spring-dotenv:3.0.0'

        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        runtimeOnly 'com.mysql:mysql-connector-j'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

        // Lombok
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")
        testCompileOnly("org.projectlombok:lombok")
        testAnnotationProcessor("org.projectlombok:lombok")

        // https://mvnrepository.com/artifact/org.mapstruct/mapstruct
        implementation("org.projectlombok:lombok")

        // Logging
        testImplementation("ch.qos.logback:logback-classic")

        // 단위 테스트는 JUnit 5를 사용합니다.
        testImplementation("org.junit.jupiter:junit-jupiter")
        testImplementation("org.junit.jupiter:junit-jupiter-migrationsupport")
        testRuntimeOnly("org.junit.platform:junit-platform-engine")

        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude(module: "junit")
            exclude group: 'org.skyscreamer', module: 'jsonassert'
        }

        // Property based testing
        testImplementation("io.github.benas:random-beans:3.9.0")
        testImplementation("com.github.javafaker:javafaker:1.0.2")
    }

    test {
        // Use junit platform for unit tests
        useJUnitPlatform()

        testLogging {
            "failed"
        }

        systemProperty("spring.profiles.active", "test")
    }
}
